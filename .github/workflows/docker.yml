name: NT Search Docker

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
  pull_request:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from package.json
        id: version
        run: |
          version=$(cat package.json | grep '"version"' | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "app_version=${version}" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/nt-search
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest
            type=raw,value=${{ env.app_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/nt-search:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: SSH to server and run docker-compose

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: SSH to server and run docker-compose -f docker-compose.prod.yml
