name: Release Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Release version
        id: release_version
        run: |
          app_version=$(cat version.py | sed -ne "s/APP_VERSION\s*=\s*[\"']v\?\(.*\)[\"']/\1/gp")
          echo "app_version=${app_version}" >> $GITHUB_ENV
          echo "version=${app_version}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.app_version }}
          release_name: Release v${{ env.app_version }}
          draft: false
          prerelease: false

  build-alpine:
    runs-on: ubuntu-latest
    name: Build Alpine Image
    needs: create-release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Release version
        id: release_version
        run: |
          app_version=$(cat version.py | sed -ne "s/APP_VERSION\s*=\s*[\"']v\?\(.*\)[\"']/\1/gp")
          echo "app_version=${app_version}" >> $GITHUB_ENV
          echo "base_version=${app_version}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/nt-search
          tags: |
            type=raw,value=${{ env.app_version }}
            type=raw,value=latest
            type=raw,value=alpine

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get build date
        id: build_date
        run: |
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Alpine image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.base_version }}
            BUILD_DATE=${{ steps.build_date.outputs.date }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-debian:
    runs-on: ubuntu-latest
    name: Build Debian Image
    needs: create-release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Release version
        id: release_version
        run: |
          app_version=$(cat version.py | sed -ne "s/APP_VERSION\s*=\s*[\"']v\?\(.*\)[\"']/\1/gp")
          echo "app_version=${app_version}-debian" >> $GITHUB_ENV
          echo "base_version=${app_version}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/nt-search
          tags: |
            type=raw,value=${{ env.app_version }}
            type=raw,value=debian

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get build date
        id: build_date
        run: |
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Debian image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.debian
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.base_version }}
            BUILD_DATE=${{ steps.build_date.outputs.date }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [build-alpine, build-debian]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (Alpine)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/nt-search:${{ needs.create-release.outputs.version }}
          format: 'table'

      - name: Run Trivy vulnerability scanner (Debian)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/nt-search:${{ needs.create-release.outputs.version }}-debian
          format: 'table'

  notify:
    runs-on: ubuntu-latest
    name: Notify Release
    needs: [build-alpine, build-debian, security-scan]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.build-alpine.result == 'success' && needs.build-debian.result == 'success'
        run: |
          echo "‚úÖ Release ${{ needs.create-release.outputs.version }} published successfully!"
          echo "üê≥ Alpine image: ${{ secrets.DOCKER_USERNAME }}/nt-search:${{ needs.create-release.outputs.version }}"
          echo "üê≥ Debian image: ${{ secrets.DOCKER_USERNAME }}/nt-search:${{ needs.create-release.outputs.version }}-debian"

      - name: Notify failure
        if: needs.build-alpine.result == 'failure' || needs.build-debian.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.create-release.outputs.version }} failed!"
          exit 1
